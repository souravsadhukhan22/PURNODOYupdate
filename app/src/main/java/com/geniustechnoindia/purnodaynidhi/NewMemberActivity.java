package com.geniustechnoindia.purnodaynidhi;

import static com.geniustechnoindia.purnodaynidhi.others.APILinks.GET_INTRO_NAME;

import android.Manifest;
import android.annotation.SuppressLint;
import android.app.DatePickerDialog;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.util.Base64;
import android.util.Log;
import android.view.MenuItem;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.AppCompatRadioButton;
import androidx.appcompat.widget.Toolbar;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import com.canhub.cropper.CropImage;
import com.canhub.cropper.CropImageView;
import com.geniustechnoindia.purnodaynidhi.bean.MemberData;
import com.geniustechnoindia.purnodaynidhi.bean.TempDataBean;
import com.geniustechnoindia.purnodaynidhi.dl.GeneralFnc;
import com.geniustechnoindia.purnodaynidhi.dl.MemberManagement;
import com.geniustechnoindia.purnodaynidhi.others.APILinks;
import com.geniustechnoindia.purnodaynidhi.parsers.GetDataParserArray;
import com.geniustechnoindia.purnodaynidhi.parsers.GetDataParserObject;
import com.geniustechnoindia.purnodaynidhi.store.GlobalStore;
import com.google.android.material.bottomsheet.BottomSheetDialog;

import org.json.JSONException;
import org.json.JSONObject;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import de.hdodenhof.circleimageview.CircleImageView;

public class NewMemberActivity extends AppCompatActivity implements View.OnClickListener {
    DatePickerDialog datePickerDialog;

    EditText txtMemberName, txtFatherName, txtAddress, txtPinCode, txtPhoneNo, txtDateOfJoin,
            txtNomineeName, txtIDProofNo, txtRegAmt, mEt_emailId, mEt_state, mEt_nomineeCode, mEt_addressProofNo, mEt_idProofNo, mEt_introCode, mEt_nomineeAge;

    TextView txtMemberDOB, mTvIntroName,tvWalletBalance; //txtNomineeDOB;

    Spinner mSp_bloodGroup;

    Spinner spnNomineeRelation, spnIDProofNo, mSp_addressProofName;
    AppCompatRadioButton rboMale, rboFemale;

    Button btnSave, btnGetIntroName;

    int mYear, mMonth, mDay;
    String memberDOJ, nomineeDOB;

    int memberDOB = 0;

    private Toolbar mToolbar;
    private TextView mTv_toolbarTitle;

    private TextView mTv_takePicture;

    private CircleImageView mCiv_selectedImage;

    private Spinner mSp_signProofName;

    private EditText mEt_panNo;

    // private TextView mTv_devByGen;

    private static final int REQUEST_ID_MULTIPLE_PERMISSIONS = 1;
    private String encodedImageString = "";
    private String defaultEncodedImageString = "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";

    private String photoFileName;

    private ImageView mIv_memberPicture;
    private ImageView mIv_memberSignature;

    private ImageView mIv_addrPhoto;
    private ImageView mIv_idPhoto;
    private ImageView mIv_idFront, mIv_idBack, mIv_panPic;
    private ImageView mIv_bankAccPhoto;

    private LinearLayout mLl_memberImage;
    private LinearLayout mLl_memberSignature;
    private LinearLayout mLl_idFrontPic, mLl_idBackPic, mLl_panPic;

    private LinearLayout mLl_addrProof;
    private LinearLayout mLl_idProof;
    private LinearLayout mLl_bankAccProof;
    // Datepicker
    private Calendar mCalendar;
    private int currentDay, currentMonth, currentYear;

    private String selectedImageType = "";

    private String encodedPictureString = "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";
    private String encodedSignatureString = "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";
    private String encodedAddressString = "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";
    private String encodedIdString = "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";
    private String encodedBankString = "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";
    private String encodedIDFrontString = "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";
    private String encodedIDBackString = "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";
    private String encodedPanString = "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";


    private byte[] dataMemberPicture = null;
    private byte[] dataMemberSignature = null;
    private byte[] dataAddressProof = null;
    private byte[] dataIDFrontProof = null;
    private byte[] dataIDBackProof = null;
    private byte[] dataPanProof = null;
    private byte[] dataIdProof = null;
    private byte[] databankAccProof = null;


    private String selectedIdProofName = "";
    private String selectedAddressProofName = "";
    private String selectedBloodGroup = "";

    private EditText mEt_bankName;
    private EditText mEt_bankAccNo;
    private EditText mEt_ifscCode;

    private EditText mEt_shareAmount;

    private float selectedShareAmount = 0.0f;

    private String selectedSignProofName = "";

    private String selectedGender = "";

    private Spinner mSp_state;
    private Spinner mSp_dist;

    private String selectedState = "";
    private String selectedDist = "";

    private Button mBtn_submitIfscCode;
    private TextView mTv_bankName, mTv_branchName;


    private ArrayList<String> spinnerArrayState;
    private ArrayList<String> spinnerArrayDist;
    ArrayList<String> spinnerArray;
    private String mStr_nomRelation = "";
    ArrayList<String> arrayList_dist;

    private double walletBalance = 0.0;

    //TODO Check if id proof and nominee relation is taking or not
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_new_member);

        setViewReferences();
        bindEventHandlers();

        getWalletBalance(APILinks.GET_ARRANGER_WALLET_BALANCE + GlobalStore.GlobalValue.getUserName());

        /*mTv_devByGen.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                new OpenLinks(NewMemberActivity.this).openGeniusTechnology();
            }
        });*/
        setSupportActionBar(mToolbar);
        if (getSupportActionBar() != null) {
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
            getSupportActionBar().setDisplayShowHomeEnabled(true);
            getSupportActionBar().setDisplayShowTitleEnabled(false);
        }
        mTv_toolbarTitle.setText("New Member Entry");

        final Calendar c = Calendar.getInstance();
        mYear = c.get(Calendar.YEAR);
        mMonth = c.get(Calendar.MONTH);
        mDay = c.get(Calendar.DAY_OF_MONTH);

        // Calendar
        mCalendar = Calendar.getInstance();
        currentDay = mCalendar.get(Calendar.DAY_OF_MONTH);
        currentMonth = mCalendar.get(Calendar.MONTH);
        currentYear = mCalendar.get(Calendar.YEAR);

        txtRegAmt.setText("0");
        mEt_shareAmount.setText("10");
        //mEt_shareAmount.setEnabled(false);

        // BottomSheetDialog
        BottomSheetDialog bottomSheetDialog = new BottomSheetDialog(NewMemberActivity.this);
        bottomSheetDialog.setContentView(R.layout.custom_bottom_sheet_dialog);
        TextView mTv_title = bottomSheetDialog.findViewById(R.id.tv_custom_bottom_sheet_dialog_profile_photo_title);
        mTv_title.setVisibility(View.VISIBLE);

        photoFileName = "photo1.jpg";           // New file will replace this name

        //Load Relation From DataBase
        spinnerArray = new ArrayList<>();
        spinnerArray = new GeneralFnc().getRelation();
        ArrayAdapter<String> adapter = new ArrayAdapter<String>(
                this, R.layout.spinner_hint_select, spinnerArray);

        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        spnNomineeRelation.setAdapter(adapter);

        //final ArrayList<String> finalSpinnerArray = spinnerArray;
        final ArrayList<String> finalSpinnerArray = spinnerArray;
        spnNomineeRelation.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                if (position != 0) {
                    finalSpinnerArray.get(position);
                    mStr_nomRelation = spinnerArray.get(position);
                } else {
                    mStr_nomRelation = "";
                }

            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });

        //Load ID Proof Name
        final ArrayList<String> IDProof = new ArrayList<String>();
        IDProof.add("Aadhar Card");
        IDProof.add("Voter Card");
        IDProof.add("PAN Card");
        IDProof.add("Ration Card");
        ArrayAdapter<String> adapter1 = new ArrayAdapter<String>(
                this, android.R.layout.simple_spinner_item, IDProof);

        adapter1.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        spnIDProofNo.setAdapter(adapter1);

        spnIDProofNo.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                selectedIdProofName = IDProof.get(position);
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });

        //Load ID Proof Name
        final ArrayList<String> AddressProof = new ArrayList<String>();
        AddressProof.add("Aadhar Card");
        AddressProof.add("Voter Card");
        AddressProof.add("PAN Card");
        AddressProof.add("Ration Card");
        ArrayAdapter<String> adapter2 = new ArrayAdapter<String>(
                this, android.R.layout.simple_spinner_item, AddressProof);

        adapter2.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        mSp_addressProofName.setAdapter(adapter2);

        mSp_addressProofName.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                selectedAddressProofName = AddressProof.get(position);
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });


        //Load sign Proof Name
        final ArrayList<String> signProof = new ArrayList<String>();
        signProof.add("Aadhar Card");
        signProof.add("Voter Card");
        signProof.add("PAN Card");
        signProof.add("Ration Card");
        ArrayAdapter<String> adapterSignProof = new ArrayAdapter<String>(
                this, android.R.layout.simple_spinner_item, signProof);

        adapterSignProof.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        mSp_signProofName.setAdapter(adapterSignProof);

        mSp_signProofName.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                selectedSignProofName = signProof.get(position);
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });


        // Blood group
        final ArrayList<String> spinnerBloodGroup = new ArrayList<>();
        spinnerBloodGroup.add("Don't know");
        spinnerBloodGroup.add("A+");
        spinnerBloodGroup.add("A-");
        spinnerBloodGroup.add("B+");
        spinnerBloodGroup.add("B-");
        spinnerBloodGroup.add("O+");
        spinnerBloodGroup.add("O-");
        spinnerBloodGroup.add("AB+");
        spinnerBloodGroup.add("AB-");
        ArrayAdapter<String> adapterBloodGroup = new ArrayAdapter<String>(
                this, R.layout.spinner_hint_select, spinnerBloodGroup);

        adapterBloodGroup.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        //mSp_bloodGroup.setPrompt("Select");
        mSp_bloodGroup.setAdapter(adapterBloodGroup);

        mSp_bloodGroup.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                if (position != 0) {
                    selectedBloodGroup = spinnerBloodGroup.get(position);
                } else {
                    selectedBloodGroup = "Don't know";
                }

            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });


        // share amount
        /*ArrayList<String> spinnerShareAmountArrayList = new ArrayList<>();
        spinnerShareAmountArrayList = new GeneralFnc().getShareAmount();
        ArrayAdapter<String> adapterShareAmount = new ArrayAdapter<String>(
                this, android.R.layout.simple_spinner_item, spinnerShareAmountArrayList);

        adapterShareAmount.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        mEt_shareAmount.setAdapter(adapterShareAmount);

        final ArrayList<String> finalShareArray = spinnerShareAmountArrayList;
        mEt_shareAmount.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                selectedShareAmount = Float.parseFloat(finalShareArray.get(position));
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });*/


        /** Select state spinner */
        // Select state spinner
        ArrayList<String> spinnerArrayState = new ArrayList<>();

        spinnerArrayState = new GeneralFnc().getStatelist();
        ArrayAdapter<String> adapterStateList = new ArrayAdapter<String>(
                this, R.layout.spinner_hint_select, spinnerArrayState);

        adapterStateList.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        mSp_state.setAdapter(adapterStateList);
        //mSp_permanentState.setAdapter(adapterStateList);
        arrayList_dist = new ArrayList<>();
        final ArrayList<String> finalStateArray = spinnerArrayState;
        mSp_state.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                if (position > 0) {
                    selectedState = finalStateArray.get(position);
                    spinnerArrayDist = new GeneralFnc().getDistlist(selectedState);
                    ArrayAdapter<String> adapterStateList = new ArrayAdapter<String>(com.geniustechnoindia.purnodaynidhi.NewMemberActivity.this, android.R.layout.simple_spinner_item, spinnerArrayDist);
                    adapterStateList.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                    arrayList_dist = new GeneralFnc().getDistlist(selectedState);
                    ArrayAdapter arrayAdapter = new ArrayAdapter(com.geniustechnoindia.purnodaynidhi.NewMemberActivity.this, android.R.layout.simple_spinner_dropdown_item, arrayList_dist);
                    mSp_dist.setAdapter(arrayAdapter);

                }
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });


       /* ArrayAdapter arrayAdapter=new ArrayAdapter(NewMemberActivity.this,android.R.layout.simple_spinner_dropdown_item,arrayList_dist);
        mSp_dist.setAdapter(arrayAdapter);*/

        mSp_dist.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                if (spinnerArrayDist != null)
                    //selectedDist = spinnerArrayDist.get(position);
                    selectedDist = "Purba Medinipur";
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });

        txtMemberDOB.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                /*datePickerDialog = new DatePickerDialog(getApplicationContext(),
                        new DatePickerDialog.OnDateSetListener() {
                            @Override
                            public void onDateSet(DatePicker view, int year,
                                                  int monthOfYear, int dayOfMonth) {
                                txtMemberDOB.setText(dayOfMonth + "/" + (monthOfYear + 1) + "/" + year);
                                memberDOB = Integer.toString(year) + String.format("%02d", (monthOfYear + 1)) + String.format("%02d", dayOfMonth);
                            }
                        }, mYear, mMonth, mDay);
                datePickerDialog.show();*/

                DatePickerDialog datePickerDialog = new DatePickerDialog(com.geniustechnoindia.purnodaynidhi.NewMemberActivity.this, new DatePickerDialog.OnDateSetListener() {
                    @Override
                    public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {
                        month += 1;
                        txtMemberDOB.setText(dayOfMonth + "-" + month + "-" + year);
                        memberDOB = Integer.parseInt(Integer.toString(year) + String.format("%02d", month) + String.format("%02d", dayOfMonth));
                    }
                }, currentYear, currentMonth, currentDay);
                mCalendar.set(currentYear, currentMonth, currentDay);

                datePickerDialog.getDatePicker().setMaxDate(mCalendar.getTimeInMillis());
                datePickerDialog.show();

            }
        });

        txtDateOfJoin.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                datePickerDialog = new DatePickerDialog(getApplicationContext(),
                        new DatePickerDialog.OnDateSetListener() {
                            @Override
                            public void onDateSet(DatePicker view, int year,
                                                  int monthOfYear, int dayOfMonth) {
                                txtDateOfJoin.setText(dayOfMonth + "/" + (monthOfYear + 1) + "/" + year);
                                memberDOJ = Integer.toString(year) + String.format("%02d", (monthOfYear + 1)) + String.format("%02d", dayOfMonth);
                            }
                        }, mYear, mMonth, mDay);
                datePickerDialog.show();
            }
        });

        /*txtNomineeDOB.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                DatePickerDialog datePickerDialog = new DatePickerDialog(com.geniustechnoindia.purnodaynidhi.NewMemberActivity.this, new DatePickerDialog.OnDateSetListener() {
                    @Override
                    public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {
                        month += 1;
                        txtNomineeDOB.setText(dayOfMonth + "-" + month + "-" + year);
                        nomineeDOB = String.valueOf(Integer.parseInt(Integer.toString(year) + String.format("%02d", month) + String.format("%02d", dayOfMonth)));
                    }
                }, currentYear, currentMonth, currentDay);
                mCalendar.set(currentYear, currentMonth, currentDay);

                datePickerDialog.getDatePicker().setMaxDate(mCalendar.getTimeInMillis());
                datePickerDialog.show();
            }
        });*/

        rboMale.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                rboMale.setChecked(true);
                rboFemale.setChecked(false);
                selectedGender = "Male";
            }
        });

        rboFemale.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                rboMale.setChecked(false);
                rboFemale.setChecked(true);
                selectedGender = "Female";
            }
        });

        mLl_memberImage.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                selectedImageType = "picture";
                openBottomSheetDialog();
            }
        });

        mLl_memberSignature.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                selectedImageType = "signature";
                openBottomSheetDialog();
            }
        });

        mLl_addrProof.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                selectedImageType = "addrproof";
                openBottomSheetDialog();
            }
        });

        mLl_idFrontPic.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                selectedImageType = "idFront";
                openBottomSheetDialog();
            }
        });

        mLl_idBackPic.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                selectedImageType = "idBack";
                openBottomSheetDialog();
            }
        });

        mLl_panPic.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                selectedImageType = "panPic";
                openBottomSheetDialog();
            }
        });

        mLl_idProof.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                selectedImageType = "idproof";
                openBottomSheetDialog();
            }
        });

        mLl_bankAccProof.setOnClickListener(v -> {
            selectedImageType = "bankaccproof";
            openBottomSheetDialog();
        });


        btnSave.setOnClickListener(v -> {
            double regAmt;
            double shareAmt;

            if(mEt_shareAmount.getText().toString().trim().length() > 0){
                shareAmt = Double.parseDouble(mEt_shareAmount.getText().toString());
            } else {
                shareAmt = 0.0;
            }

            if(txtRegAmt.getText().toString().trim().length() > 0){
                regAmt = Double.parseDouble(txtRegAmt.getText().toString());
            } else {
                regAmt = 0.0;
            }

            if(walletBalance > (shareAmt + regAmt)){
                if (txtPhoneNo.getText().toString().trim().length() > 0) {
                    if (mEt_idProofNo.getText().toString().trim().length() > 0) {
                        if(shareAmt >= 10.0){
                            if (mEt_introCode.getText().toString().trim().length() > 0) {
                                final ProgressDialog progressDialog = new ProgressDialog(NewMemberActivity.this,
                                        ProgressDialog.THEME_HOLO_DARK);
                                progressDialog.setMessage("Please Wait...");
                                progressDialog.show();
                                new Handler().postDelayed(new Runnable() {
                                    @Override
                                    public void run() {
                                        try {

                                            if (txtMemberName.getText().toString().length() > 0 && txtAddress.getText().toString().length() > 0
                                                    && txtPhoneNo.getText().toString().length() > 0 && txtPinCode.getText().toString().length() > 0) {

                                                selectedShareAmount = Float.parseFloat(mEt_shareAmount.getText().toString());
                                                MemberData m = new MemberData();
                                                m.setMemberName(txtMemberName.getEditableText().toString());
                                                m.setFather(txtFatherName.getEditableText().toString());
                                                m.setAddress(txtAddress.getEditableText().toString());
                                                m.setPinCode(txtPinCode.getEditableText().toString());
                                                m.setPhoneNo(txtPhoneNo.getEditableText().toString());
                                                m.setMemberDOB(String.valueOf(memberDOB));
                                                m.setDateOfJoin(memberDOJ);
                                                m.setGender(selectedGender);
                                                m.setNominee(txtNomineeName.getEditableText().toString());
                                                m.setNomineeDOB(nomineeDOB);
                                                if (mEt_nomineeAge.getText().toString().trim().length() > 0) {
                                                    m.setNomineeAge(Integer.parseInt(mEt_nomineeAge.getText().toString()));
                                                }
                                                m.setNomineeRelation(mStr_nomRelation);
                                                m.setEmailId(mEt_emailId.getText().toString());
                                                m.setDistrict(selectedDist);
                                                m.setState(selectedState);
                                                m.setNomineeCode(mEt_nomineeCode.getText().toString());             // TODO Nominee code not set when sending data
                                                m.setBloodGroup(selectedBloodGroup);
                                                m.setSelectedIdProofName(selectedIdProofName);
                                                m.setSelectedAddressProofName(selectedAddressProofName);
                                                m.setSelectedAddressProofNo(mEt_addressProofNo.getText().toString());
                                                m.setSelectedIdProofNo(mEt_idProofNo.getText().toString());
                                                m.setBankName(mTv_bankName.getText().toString());
                                                m.setBranchName(mTv_branchName.getText().toString());
                                                m.setBankAccNo(mEt_bankAccNo.getText().toString());
                                                m.setBankIfscCode(mEt_ifscCode.getText().toString());
                                                m.setShareAmount(selectedShareAmount);
                                                m.setSignProofName(selectedSignProofName);
                                                m.setPanNo(mEt_panNo.getText().toString());
                                                m.setIntroCode(mEt_introCode.getText().toString());

                                                /*if (encodedImageString.equals("")) {*/
                                                //byte[] data = Base64.decode(defaultEncodedImageString, Base64.DEFAULT);


                                                m.setImageEncodedString(dataMemberPicture);
                                                m.setSignatureEncodingString(dataMemberSignature);
                                                m.setIdEncodingString(dataIdProof);
                                                m.setAddressEncodingString(dataAddressProof);

                                                m.setIdFrontEncodingString(dataIDFrontProof);
                                                m.setIdBackEncodingString(dataIDBackProof);
                                                m.setPanEncodingString(dataPanProof);


                                                //m.setBankAccEncodingString(databankAccProof);
            /*} else {
                byte[] data = Base64.decode(encodedImageString, Base64.DEFAULT);
                m.setImageEncodedString(String.valueOf(data));
            }*/

                                                //m.setSignatureEncodingString();                                                     // TODO Get signature byte array

                                                if (txtRegAmt.getText().toString().trim().length() > 0) {
                                                    m.setRegAmt(Double.parseDouble(txtRegAmt.getText().toString()));
                                                } else {
                                                    m.setRegAmt(0);
                                                }

                                                if (new MemberManagement().insertMember(m)) {
                                                    //Toast.makeText(getApplicationContext(), "Save Successfully", Toast.LENGTH_LONG);
                                                    AlertDialog.Builder builder = new AlertDialog.Builder(NewMemberActivity.this);
                                                    builder.setCancelable(false);
                                                    builder.setTitle("Successful");
                                                    builder.setMessage("Member Saved Successfully.\n\nThe Member Code is " + TempDataBean.tempMemberCode);
                                                    builder.setPositiveButton("Ok", new DialogInterface.OnClickListener() {
                                                        @Override
                                                        public void onClick(DialogInterface dialog, int which) {
                                                            //builder.setCancelable(true);
                                                            Intent i = new Intent(NewMemberActivity.this, NewMemberActivity.class);
                                                            overridePendingTransition(R.anim.fade_in, R.anim.fade_out);
                                                            startActivity(i);
                                                            finish();
                                                            progressDialog.dismiss();
                                                        }
                                                    }).show();

                                                } else {
                                                    if (TempDataBean.NewMemberErrorCode == 50078) {
                                                        Toast.makeText(NewMemberActivity.this, "Member Already exist", Toast.LENGTH_LONG).show();
                                                        progressDialog.dismiss();
                                                    } else {
                                                        Log.d("savefile", "run: "+new MemberManagement().insertMember(m));
                                                        Toast.makeText(getApplicationContext(), "Save Failed", Toast.LENGTH_LONG).show();
                                                        progressDialog.dismiss();
                                                    }

                                                }
                                            } else {
                                                Toast.makeText(NewMemberActivity.this, "Please Enter Sufficient Data", Toast.LENGTH_SHORT).show();
                                            }


                                        } catch (Exception e) {
                                            e.printStackTrace();
                                        }
                                    }
                                }, 3000);
                            } else {
                                mEt_introCode.setError("Enter intro code");
                                mEt_introCode.requestFocus();
                            }
                        } else {
                            Toast.makeText(this, "Share amount should not be less than 10", Toast.LENGTH_SHORT).show();
                        }
                    } else {
                        mEt_idProofNo.setError("Enter Id proof no");
                        mEt_idProofNo.requestFocus();
                    }
                } else {
                    txtPhoneNo.setError("Enter phone no");
                    txtPhoneNo.requestFocus();
                }
            } else {
                Toast.makeText(this, "Not enough balance in wallet", Toast.LENGTH_SHORT).show();
            }

        });
    }


    private void bindEventHandlers() {
        mTv_takePicture.setOnClickListener(this);
        mBtn_submitIfscCode.setOnClickListener(this);
        btnGetIntroName.setOnClickListener(this);
    }

    private void setViewReferences() {
        mToolbar = findViewById(R.id.custom_toolbar);
        mTv_toolbarTitle = findViewById(R.id.toolbar_title);

        txtMemberName = findViewById(R.id.txtNewMemberName);
        txtFatherName = findViewById(R.id.txtNewMemberFather);
        txtAddress = findViewById(R.id.txtNewMemberAddress);
        txtPinCode = findViewById(R.id.txtNewMemberPinCode);
        txtPhoneNo = findViewById(R.id.txtNewMemberPhone);
        txtMemberDOB = findViewById(R.id.txtNewMemberDOB);
        txtDateOfJoin = findViewById(R.id.txtNewMemberDateOfJoin);
        txtNomineeName = findViewById(R.id.txtNewMemberNomineeName);
        //txtNomineeDOB = findViewById(R.id.txtNewMemberNomineeDOB);
        mEt_nomineeAge = findViewById(R.id.txtNewMemberNomineeAge);
        //txtIDProofNo = findViewById(R.id.txtNewMemberIDProofNo);
        txtRegAmt = findViewById(R.id.txtNewMemberRegAmt);
        mEt_emailId = findViewById(R.id.et_activity_new_member_email);
        //mTv_devByGen = findViewById(R.id.tv_activity_new_member_developed_by);
        mEt_panNo = findViewById(R.id.et_activity_new_member_pan_no);

        spnNomineeRelation = findViewById(R.id.spnNewMemberNomineeRelation);
        spnIDProofNo = findViewById(R.id.spnNewMemberIDProofNo);

        rboMale = findViewById(R.id.rboMale);
        rboFemale = findViewById(R.id.rboFemale);

        mTv_takePicture = findViewById(R.id.tv_activity_new_member_take_image);

        mCiv_selectedImage = findViewById(R.id.civ_activity_new_member_selected_image);

        mIv_memberPicture = findViewById(R.id.iv_activity_new_member_picture);
        mIv_memberSignature = findViewById(R.id.iv_activity_new_member_signature);
        mIv_addrPhoto = findViewById(R.id.iv_activity_new_member_address_proof);
        mIv_idPhoto = findViewById(R.id.iv_activity_new_member_id_proof);
        mIv_bankAccPhoto = findViewById(R.id.iv_activity_new_member_bank_acc_proof);

        mLl_memberImage = findViewById(R.id.ll_activity_new_member_picture_root);
        mLl_memberSignature = findViewById(R.id.ll_activity_new_member_signature_root);

        mLl_addrProof = findViewById(R.id.ll_activity_new_member_addr_proof);
        mLl_idProof = findViewById(R.id.ll_activity_new_member_id_proof);
        mLl_bankAccProof = findViewById(R.id.ll_activity_new_member_bank_acc_proof);

        mEt_shareAmount = findViewById(R.id.et_activity_new_member_share_amount);

        btnSave = findViewById(R.id.btnNewMemberSave);
        mEt_state = findViewById(R.id.et_activity_new_member_state);
        mEt_nomineeCode = findViewById(R.id.et_activity_new_member_nominee_code);
        mSp_bloodGroup = findViewById(R.id.sp_activity_new_member_blood_group);         // TODO spinner
        mSp_addressProofName = findViewById(R.id.sp_activity_new_member_address_proof);
        mEt_addressProofNo = findViewById(R.id.et_activity_new_member_address_proof_no);
        mEt_idProofNo = findViewById(R.id.txtNewMemberIDProofNo);

        mEt_bankName = findViewById(R.id.et_activity_new_member_bank_name);
        mEt_bankAccNo = findViewById(R.id.et_activity_new_member_acc_number);
        mEt_ifscCode = findViewById(R.id.et_activity_new_member_ifsc_code);

        mSp_signProofName = findViewById(R.id.sp_activity_new_member_sign_proof);

        mSp_state = findViewById(R.id.sp_activity_new_member_entry_spinner_state);
        mSp_dist = findViewById(R.id.sp_activity_new_member_entry_spinner_dist);

        mBtn_submitIfscCode = findViewById(R.id.btn_activity_new_member_submit_ifsc_code);
        mTv_bankName = findViewById(R.id.tv_activity_new_member_bank_name);
        mTv_branchName = findViewById(R.id.tv_activity_new_member_branch_name);

        mLl_idFrontPic = findViewById(R.id.ll_activity_new_member_id_front);
        mLl_idBackPic = findViewById(R.id.ll_activity_new_member_id_back);
        mLl_panPic = findViewById(R.id.ll_activity_new_member_pan);
        mIv_idFront = findViewById(R.id.iv_activity_new_member_id_front);
        mIv_idBack = findViewById(R.id.iv_activity_new_member_id_back);
        mIv_panPic = findViewById(R.id.iv_activity_new_member_pan);
        mEt_introCode = findViewById(R.id.et_activity_new_member_introducer_code);
        btnGetIntroName = findViewById(R.id.btnGetIntroName);
        mTvIntroName = findViewById(R.id.tv_activity_new_member_introducer_code);

        tvWalletBalance = findViewById(R.id.tvWalletBalance);
    }

    private void getWalletBalance(String walletURL) {
        new GetDataParserObject(NewMemberActivity.this, walletURL, true, response -> {
            try {
                if (response != null) {
                    walletBalance = response.getDouble("bal");
                    tvWalletBalance.setText("Rs. " + walletBalance);
                }
            } catch (JSONException e) {
                e.printStackTrace();
            }
        });
    }

    private boolean isValidate(String Message) {
        boolean rValue = false;

        if (txtMemberName.getEditableText().toString().isEmpty()) {
            rValue = false;
            Message = "Member Name Required";
        } else if (txtDateOfJoin.getEditableText().toString().isEmpty()) {
            rValue = false;
            Message = "Date Of Join Required";
        } else if (txtMemberDOB.getEditableText().toString().isEmpty()) {
            rValue = false;
            Message = "Member Date Of Birth requred";
        } else {
            rValue = true;
        }
        return rValue;
    }

    private void insertMember() {
        String errMsg = "";
        if (!this.isValidate(errMsg)) {
            Toast.makeText(getApplicationContext(), errMsg.toString(), Toast.LENGTH_SHORT).show();
        } else {

        }
    }

    @Override
    public void onBackPressed() {
        //super.onBackPressed();
        startActivity(new Intent(com.geniustechnoindia.purnodaynidhi.NewMemberActivity.this, com.geniustechnoindia.purnodaynidhi.MainActivity.class));
        overridePendingTransition(R.anim.fade_in, R.anim.fade_out);
        finish();
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                // todo: goto back activity from here
                Intent intent = new Intent(com.geniustechnoindia.purnodaynidhi.NewMemberActivity.this, com.geniustechnoindia.purnodaynidhi.MainActivity.class);
                startActivity(intent);
                finish();
                overridePendingTransition(R.anim.fade_in, R.anim.fade_out);
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }

    @Override
    public void onClick(View v) {
        if (v == mTv_takePicture) {
            //openBottomSheetDialog();
        }
        if (v == mBtn_submitIfscCode) {
            String url = "https://ifsc.razorpay.com/" + mEt_ifscCode.getText().toString();
            new GetDataParserObject(this, url, true, new GetDataParserObject.OnGetResponseListner() {
                @Override
                public void onGetResponse(JSONObject response) {
                    try {
                        if (response != null) {
                            mTv_bankName.setText(response.getString("BANK"));
                            mTv_branchName.setText(response.getString("BRANCH"));
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            });
        } else if (v == btnGetIntroName) {
            if(mEt_introCode.getText().toString().trim().length() > 0){
                getIntroName(GET_INTRO_NAME + mEt_introCode.getText().toString());
            } else {
                Toast.makeText(NewMemberActivity.this, "Please enter introducer code", Toast.LENGTH_SHORT).show();
            }

        }
    }

    private void getIntroName(String URL) {
        new GetDataParserArray(NewMemberActivity.this, URL, true, response -> {
            if (response != null && response.length() > 0) {
                try {
                    mTvIntroName.setText(response.getString(0));
                } catch (JSONException e) {
                    e.printStackTrace();
                }
            }
        });
    }

    public void openBottomSheetDialog() {
        BottomSheetDialog bottomSheetDialog = new BottomSheetDialog(com.geniustechnoindia.purnodaynidhi.NewMemberActivity.this);
        bottomSheetDialog.setContentView(R.layout.custom_bottom_sheet_dialog);

        ImageView mIv_camera = bottomSheetDialog.findViewById(R.id.iv_custom_bottom_sheet_dialog_select_image);
        mIv_camera.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (checkAndRequestPermissions()) {
                    //TODO: Permission granted
                    takeImage();
                }
            }
        });
        bottomSheetDialog.show();
    }

    private boolean checkAndRequestPermissions() {
        int permissionCamera = ContextCompat.checkSelfPermission(NewMemberActivity.this,
                Manifest.permission.CAMERA);
        int permissionStorage = 0;
        if (Build.VERSION.SDK_INT <= 28) {
            permissionStorage = ContextCompat.checkSelfPermission(NewMemberActivity.this,
                    Manifest.permission.WRITE_EXTERNAL_STORAGE);
        }

        List<String> listPermissionsNeeded = new ArrayList<>();
        if (permissionCamera != PackageManager.PERMISSION_GRANTED) {
            listPermissionsNeeded.add(Manifest.permission.CAMERA);
        }
        if (Build.VERSION.SDK_INT <= 28) {
            if (permissionStorage != PackageManager.PERMISSION_GRANTED) {
                listPermissionsNeeded.add(Manifest.permission.WRITE_EXTERNAL_STORAGE);
            }
        }
        if (!listPermissionsNeeded.isEmpty()) {
            ActivityCompat.requestPermissions(com.geniustechnoindia.purnodaynidhi.NewMemberActivity.this, listPermissionsNeeded.toArray(new String[listPermissionsNeeded.size()]), REQUEST_ID_MULTIPLE_PERMISSIONS);
            return false;
        }
        return true;
    }

    /**
     * Trigger image selection for photo
     **/
    public void takeImage() {
        CropImage.activity()
                .setGuidelines(CropImageView.Guidelines.ON)
                .start(this);
    }

    @SuppressLint("NewApi")
    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {
            CropImage.ActivityResult result = CropImage.getActivityResult(data);
            if (resultCode == RESULT_OK) {
                Uri resultUri = result.getUriContent();
                mTv_takePicture.setText("Image selected");
                InputStream imageStream = null;
                try {
                    imageStream = this.getContentResolver().openInputStream(resultUri);
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
                Bitmap yourSelectedImage = BitmapFactory.decodeStream(imageStream);
                try {
                    if (selectedImageType.equals("picture")) {
                        mIv_memberPicture.setImageBitmap(yourSelectedImage);
                        encodedPictureString = encodeToBase64(compressImage(yourSelectedImage));
                        dataMemberPicture = Base64.decode(encodedPictureString, Base64.DEFAULT);
                        //dataMemberPicture = bitmapToByteArray(yourSelectedImage);
                    } else if (selectedImageType.equals("signature")) {
                        mIv_memberSignature.setImageBitmap(yourSelectedImage);
                        encodedSignatureString = encodeToBase64(yourSelectedImage);
                        dataMemberSignature = Base64.decode(encodedSignatureString, Base64.DEFAULT);
                        //dataMemberSignature = bitmapToByteArray(yourSelectedImage);
                    } else if (selectedImageType.equals("addrproof")) {
                        mIv_addrPhoto.setImageBitmap(yourSelectedImage);
                        encodedAddressString = encodeToBase64(compressImage(yourSelectedImage));
                        dataAddressProof = Base64.decode(encodedAddressString, Base64.DEFAULT);
                        //dataAddressProof = bitmapToByteArray(yourSelectedImage);
                    } else if (selectedImageType.equals("idproof")) {
                        mIv_idPhoto.setImageBitmap(yourSelectedImage);
                        /*encodedIdString = encodeToBase64(compressImage(yourSelectedImage));
                        dataIdProof = Base64.decode(encodedIdString, Base64.DEFAULT);*/
                        //dataIdProof = bitmapToByteArray(yourSelectedImage);
                    } else if (selectedImageType.equals("idFront")) {
                        mIv_idFront.setImageBitmap(yourSelectedImage);
                        encodedIDFrontString = encodeToBase64(compressImage(yourSelectedImage));
                        dataIDFrontProof = Base64.decode(encodedIDFrontString, Base64.DEFAULT);
                        //dataAddressProof = bitmapToByteArray(yourSelectedImage);
                    } else if (selectedImageType.equals("idBack")) {
                        mIv_idBack.setImageBitmap(yourSelectedImage);
                        encodedIDBackString = encodeToBase64(compressImage(yourSelectedImage));
                        dataIDBackProof = Base64.decode(encodedIDBackString, Base64.DEFAULT);
                        //dataAddressProof = bitmapToByteArray(yourSelectedImage);
                    } else if (selectedImageType.equals("panPic")) {
                        mIv_panPic.setImageBitmap(yourSelectedImage);
                        encodedPanString = encodeToBase64(compressImage(yourSelectedImage));
                        dataPanProof = Base64.decode(encodedPanString, Base64.DEFAULT);
                        //dataAddressProof = bitmapToByteArray(yourSelectedImage);
                    }

                    /*else if (selectedImageType.equals("bankaccproof")) {
                        mIv_bankAccPhoto.setImageBitmap(yourSelectedImage);
                        encodedBankString = encodeToBase64(compressImage(yourSelectedImage));
                        databankAccProof = Base64.decode(encodedBankString, Base64.DEFAULT);
                    }*/
                } catch (Exception e) {
                    e.printStackTrace();
                }

                //mCiv_selectedImage.setImageBitmap(yourSelectedImage);
                //encodedImageString = encodeToBase64(yourSelectedImage);
            } else if (resultCode == CropImage.CROP_IMAGE_ACTIVITY_RESULT_ERROR_CODE) {
                Exception error = result.getError();
                Toast.makeText(this, "Failed to take image.", Toast.LENGTH_SHORT).show();
            }
        }
    }


    private byte[] bitmapToByteArray(Bitmap bmp) {
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        bmp.compress(Bitmap.CompressFormat.PNG, 100, stream);
        byte[] byteArray = stream.toByteArray();
        //bmp.recycle();
        return byteArray;
    }

    public static String encodeToBase64(Bitmap image) {
        Bitmap immagex = image;
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        immagex.compress(Bitmap.CompressFormat.JPEG, 100, baos);
        byte[] b = baos.toByteArray();
        String imageEncoded = Base64.encodeToString(b, Base64.DEFAULT);

        Log.e("LOOK", imageEncoded);
        return imageEncoded;
    }

    public Bitmap compressImage(Bitmap image) {
        Bitmap decoded = null;
        try {
            ByteArrayOutputStream out = new ByteArrayOutputStream();
            image.compress(Bitmap.CompressFormat.PNG, 55, out);
            decoded = BitmapFactory.decodeStream(new ByteArrayInputStream(out.toByteArray()));
            return decoded;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return decoded;
    }

}
